<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUUCTF Misc(1)</title>
      <link href="/2022/01/09/BUUCTF-Misc-1/"/>
      <url>/2022/01/09/BUUCTF-Misc-1/</url>
      
        <content type="html"><![CDATA[<p>原博主链接：<a href="https://davidcheyenneone.github.io/Misc/BUUCTF/BUUCTF%20Misc%201%EF%BC%881-20%EF%BC%89.html">https://davidcheyenneone.github.io/Misc/BUUCTF/BUUCTF%20Misc%201%EF%BC%881-20%EF%BC%89.html</a></p><h3 id="1、签到题"><a href="#1、签到题" class="headerlink" title="1、签到题"></a>1、签到题</h3><p>由题目直接获得flag</p><h3 id="2、金三胖"><a href="#2、金三胖" class="headerlink" title="2、金三胖"></a>2、金三胖</h3><p>下载文件，得到一份GIF文件，首先猜测flag是否藏在某些帧中</p><p>用GIFFrame查看帧，发现第20、50、78帧藏有flag</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092239389.png" style="zoom: 67%;" /><h3 id="3、二维码"><a href="#3、二维码" class="headerlink" title="3、二维码"></a>3、二维码</h3><p>打开文件得到一张二维码，尝试用在线二维码解码解密，得到secret is here，但这并不是flag。</p><p>于是尝试用foremost分离文件得到一个压缩包，压缩包有一个加密文本文件，提示是4位纯数字密码，用ARCHOR破解密码，打开文件即可得到flag。</p><h3 id="4、你竟然赶我走"><a href="#4、你竟然赶我走" class="headerlink" title="4、你竟然赶我走"></a>4、你竟然赶我走</h3><p>首先尝试文件分离发现没有其他文件，于是尝试用十六进制编辑器查看，在文件尾得到flag</p><h3 id="5、N种方法解决"><a href="#5、N种方法解决" class="headerlink" title="5、N种方法解决"></a>5、N种方法解决</h3><p>发现是一个exe文件，尝试运行，无法打开，于是将后缀改为txt查看文本，发现似乎是一个图片网址，拖入浏览器查看，得到一个二维码图片，解密即可。</p><h3 id="6、大白"><a href="#6、大白" class="headerlink" title="6、大白"></a>6、大白</h3><p>看到图片以及题目提示我们易知，是图片长度问题</p><p>于是使用十六进制编辑器查看修改高度即可得到flag。</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092241842.jpeg"></p><p>第二行：</p><p>0-3列为宽：00 00 01 F4为十六进制，十进制为500</p><p>4-7列为长：00 00 01 A4为十六进制，十进制为420。</p><p>即图片规格为500×420。</p><h3 id="7、基础破解"><a href="#7、基础破解" class="headerlink" title="7、基础破解"></a>7、基础破解</h3><p>题目提示压缩包为4位数字加密，用ARCHPR暴力破解得到密码，打开文本，得到base64，解密即可得到flag</p><h3 id="8、乌镇峰会种图"><a href="#8、乌镇峰会种图" class="headerlink" title="8、乌镇峰会种图"></a>8、乌镇峰会种图</h3><p>首先查看文件大小，排除有隐藏文件。于是用十六进制查看器打开图片。</p><p>查找flag字段即可得到flag</p><h3 id="9、LSB"><a href="#9、LSB" class="headerlink" title="9、LSB"></a>9、LSB</h3><p>由题目得到提示，首先打开Stegsolve查看图片</p><p>进行数据抽取得到一个二维码，解密即可得到flag</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092242055.png"></p><p><strong>数据抽取</strong>：</p><p>1）<em>RGB是红绿蓝</em>，他们的值实际代表亮度，数字越大亮度越高。</p><p>亮度一共有256个级别，从0到255，因为2^8=256，因此一共有8个通道。</p><p>2）<em>Alpha是透明度</em>，该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域（alpha的值为0就是全透明，alpha 的值为 255 则表示不透明）</p><p>3）Extra By(额外的)：分为row（行）和column（纵）</p><p>  每个像素用R，G，B三个分量表示，那么一张图片就像一个矩阵，矩阵的每个单位就是（0<del>255，0</del>255，0~255）</p><p>  也就会有是纵排列和行排列了，一般事先访问行再访问列</p><p>4）Bit Order（位顺序）:</p><p>MSB是一串数据的最高位，LSB是一串数据的最低位。</p><p>5）Bit Plane Order（位平面的顺序)</p><p>   整个图像分解为8个位平面，从LSB(最低有效位0)到MSB（最高有效位7）随着从位平面0 到位平面7，位平面图像的特征逐渐变得复杂，细节不断增加。</p><p>一般图片是24位，也就是3个8 ，可以看成三明治，比如BGR就是B为三明治第一层 G为第二层 R为第三层。</p><p> 转载于：<a href="http://www.cnblogs.com/cat47/p/11483478.html">http://www.cnblogs.com/cat47/p/11483478.html</a></p><h3 id="10、文件中的秘密"><a href="#10、文件中的秘密" class="headerlink" title="10、文件中的秘密"></a>10、文件中的秘密</h3><p>提示文件中的秘密于是首先点开属性查看图片的详细信息，即可得到flag</p><h3 id="11、wireshark"><a href="#11、wireshark" class="headerlink" title="11、wireshark"></a>11、wireshark</h3><p>用wireshark打开文件，根据题目提示查找pass字段，即可得到flag</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092243074.png"></p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092243343.png"></p><h3 id="12、rar"><a href="#12、rar" class="headerlink" title="12、rar"></a>12、rar</h3><p>由提示该压缩包为纯四位数密码，先解密得到密码，打开文件即可得到flag</p><h3 id="13、zip伪加密"><a href="#13、zip伪加密" class="headerlink" title="13、zip伪加密"></a>13、zip伪加密</h3><p>   一般伪加密在文件头的加密标志位做修改，进而再打开文件时识被别为加密压缩包。 一般来说，文件各个区域开头就是50 4B，然后后面两个字节是版本，再后面两个就是判断是否有加密的关键了。</p><p><font color='red'>原理：</font></p><p>zip文件由三部分组成：压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092338887.png"></p><p><strong>压缩文件数据区：</strong></p><p>50 4B 03 04：头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>01 00：<strong>全局方式位标记（有无加密） 头文件标记后2bytes</strong><br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>00 00：扩展记录长度 </p><p><strong>压缩文件目录区：</strong></p><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br>3F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br>09 00：<strong>全局方式位标记（有无加密，伪加密的关键） 目录文件标记后4bytes</strong><br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量 </p><p><strong>压缩文件目录结束标志：</strong></p><p>50 4B 05 06：目录结束标记<br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>59 00 00 00：目录区尺寸大小<br>3E 00 00 00：目录区对第一张磁盘的偏移量<br>00 00：ZIP 文件注释长度</p><p>修改压缩源文件目录区的全布局方式标记比特值之后即可对文件加密或解密</p><p>全局方式位标记的四个数字中只有<strong>第二个数字</strong>对其有影响，其它的不管为何值，都不影响它的加密属性！<br>第二个数字为奇数时 –&gt;加密<br>第二个数字为偶数时 –&gt;未加密</p><p><strong>辨别当前的zip是真的加密还是伪加密？</strong></p><p><strong>无加密：</strong><br>压缩源文件数据区的全局加密应当为 00 00（头文件标记后2bytes）<br>且压缩源文件目录区的全局方式标记应当为00 00 （目录文件标记后4bytes）</p><p><strong>假加密：</strong><br>压缩源文件数据区的全局加密应当为 00 00<br>且压缩文件目录区的全局方式标记应当为 09 00</p><p><strong>真加密：</strong><br>压缩源文件数据区的全局加密应当为 09 00<br>且压缩源文件目录区的全局方式应当为 09 00</p><p>zip伪加密解决方法：</p><p>（原文链接：<a href="https://blog.csdn.net/pdsu161530247/article/details/73612910">https://blog.csdn.net/pdsu161530247/article/details/73612910</a> ）</p><p><strong>1）使用 ZipCenOp.jar (需要java环境)</strong></p><p>命令如下：</p><p><font color='red'><strong>java -jar ZipCenOp.jar r xxx.zip</strong></font></p><p>将压缩包和ZipCenOp放在同一目录下，用cmd执行命令即可，若success后，可直接打开压缩包</p><p>？：处理后压缩包要用winrar才能打开7-zip打开仍需要密码，不知道为什么会这样</p><p><strong>2）修改文件头加密标志位</strong></p><p>头文件标记后2bytes、目录文件标记后4bytes这两处（四位中的）第二位为偶数即可</p><p>针对此题：</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201101636357.png"  /><p>我们使用winhex打开压缩包后，首先查找50 4B字段，可以得到该压缩包的三个部分：压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志。</p><p>在数据区头文件后的2个字节后可以看到全局加密为09 00，说明是加密的；</p><p>在目录区头文件标记后的4个字节后可以看到全局方式标记为09  00说明是加密的；</p><p>将全局方位标记处的9修改偶数即可</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201101646071.png" style="zoom:80%;" /><h3 id="14、QR"><a href="#14、QR" class="headerlink" title="14、QR"></a>14、QR</h3><img src="https://gitee.com/mie1732/emc/raw/master/img/202201101658366.png" alt="image-20220110165847281" style="zoom: 50%;" /><h3 id="15、被嗅探的流量"><a href="#15、被嗅探的流量" class="headerlink" title="15、被嗅探的流量"></a>15、被嗅探的流量</h3><p>下载题目得到一个pcapng文件，用wireshark打开</p><p>先在分组字节流中查找flag字符串，发现flag</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201131550577.png" style="zoom: 33%;" /><h3 id="16、镜子里面的世界"><a href="#16、镜子里面的世界" class="headerlink" title="16、镜子里面的世界"></a>16、镜子里面的世界</h3><p>下载得到一张图片提示到：Look very closely，于是猜想是不是LSB隐写，并且图片名为steg，于是先用zsteg检测图片里的隐写数据（png、bmp），得到flag。</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201131601717.png" alt="kali里使用" style="zoom: 67%;" /><h3 id="17、ningen"><a href="#17、ningen" class="headerlink" title="17、ningen"></a>17、ningen</h3><h4 id="法一：foremost提取"><a href="#法一：foremost提取" class="headerlink" title="法一：foremost提取"></a>法一：foremost提取</h4><p>观察图片没有发现什么，题目提示有密码，于是尝试用foremost提取（猜测可能有压缩文件）。</p><p>提取后得到一个加密的压缩包，题目提示为4位的纯数字密码，爆破即可。</p><h5 id="各文件的头尾总结"><a href="#各文件的头尾总结" class="headerlink" title="各文件的头尾总结"></a>各文件的头尾总结</h5><p>（原博客：<a href="https://blog.csdn.net/qq_29277155/article/details/98060616%EF%BC%89">https://blog.csdn.net/qq_29277155/article/details/98060616）</a></p><h6 id="1-图片文件"><a href="#1-图片文件" class="headerlink" title="1.图片文件"></a>1.图片文件</h6><p>JPEG (jpg/jpe/jpeg)                文件头：FFD8FF　　　　　文件尾：FF D9　　　　　　　　　　　　　　　<br>PNG (png)                        文件头：89504E47　　　　文件尾：AE 42 60 82<br>GIF (gif)                        文件头：47494638　　　　文件尾：00 3B<br>TIFF (tif)                       文件头：49492A00        文件尾：<br>Windows Bitmap (bmp)             文件头：424D            文件尾：<br>ico（ico)                        文件头：00 00 01 00<br>Adobe Photoshop (psd)         文件头：38425053        文件尾：</p><h6 id="2-office文件"><a href="#2-office文件" class="headerlink" title="2.office文件"></a>2.office文件</h6><p>MS Word/Excel (xls.or.doc)    文件头：D0CF11E0<br>MS Access (mdb)               文件头：5374616E64617264204A<br>WordPerfect (wpd)             文件头：FF575043<br>Adobe Acrobat (pdf)           文件头：255044462D312E<br>application/vnd.visio(vsd)        文件头：d0cf11e0a1b11ae1<br>Email [thorough only] (eml)   文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)         文件头：CFAD12FEC5FD746F<br>Outlook (pst)                         文件头：2142444E<br>Rich Text Format (rtf)        文件头：7B5C727466        </p><p>txt 文件(txt)          文件头：Unicode：feff     / Unicode big endian：fffe    / UTF-8：efbbbf    /ANSI编码是没有文件头的</p><h6 id="3-压缩包文件"><a href="#3-压缩包文件" class="headerlink" title="3.压缩包文件"></a>3.压缩包文件</h6><p>ZIP Archive (zip)               文件头：504B0304        文件尾：50 4B<br>RAR Archive (rar)             文件头：52617221</p><h6 id="4-音频文件"><a href="#4-音频文件" class="headerlink" title="4.音频文件"></a>4.音频文件</h6><p>Wave (wav)                    文件头：57415645<br>audio(Audio)                   文件头： 4D546864,<br>audio/x-aac（aac）              文件头：fff1 / fff9</p><h6 id="5-视频文件"><a href="#5-视频文件" class="headerlink" title="5.视频文件"></a>5.视频文件</h6><p>AVI (avi)，                     文件头：41564920<br>Real Audio (ram)              文件头：2E7261FD<br>Real Media (rm)               文件头：2E524D46<br>MPEG (mpg)                    文件头：000001BA<br>MPEG (mpg)                   文件头：000001B3<br>Quicktime (mov)               文件头：6D6F6F76<br>Windows Media (asf)           文件头：3026B2758E66CF11<br>MIDI (mid)                           文件头：4D546864</p><h6 id="6-代码文件"><a href="#6-代码文件" class="headerlink" title="6.代码文件"></a>6.代码文件</h6><p>XML (xml)                       文件头：3C3F786D6C            文件尾：<br>HTML (html)                   文件头：68746D6C3E</p><p>Quicken (qdf)                 文件头：AC9EBD8F<br>Windows Password (pwl)        文件头：E3828596</p><h6 id="7-其他类型"><a href="#7-其他类型" class="headerlink" title="7.其他类型"></a>7.其他类型</h6><p>windows证书文件(der)       文件头：30 82 03 C9<br>CAD (dwg)                      文件头：41433130　　　　　文件尾：<br>Windows Shortcut (lnk)        文件头：4C000000<br>Windows reg (reg)                    文件头：5245474544495434</p><h4 id="法二：winhex"><a href="#法二：winhex" class="headerlink" title="法二：winhex"></a><strong>法二：winhex</strong></h4><p>一个完整的 jpg 文件由 FF D8 开头，FF D9结尾，图片查看器会忽略 FF D9 以后的内容，因此可以在 jpg 文件中加入其他文件。</p><p>经过上面的分析，知道图片中隐藏了zip文件，zip文件的开头16进制为50 4B 03 04   ，先搜索16进制文本 FF D9，然后后面跟着50 4B 03 04，于是就可以从 50 开始，复制到最后（因为这里只有一个zip，所以复制到最后），另存为新文件，就得到了隐藏的压缩包。</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201131718550.png" style="zoom: 67%;" /><p>分别为选块起始位置和选块尾部，点击编辑，导出文件（zip）即可。</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201131723120.png" style="zoom:67%;" /><h3 id="18、小明的保险箱"><a href="#18、小明的保险箱" class="headerlink" title="18、小明的保险箱"></a>18、小明的保险箱</h3><p>下载得到jpg图片后先用foremost提取，得到加密压缩包。提示为四位纯数字密码，暴力破解，打开压缩包即可得到flag。</p><h3 id="19、爱因斯坦"><a href="#19、爱因斯坦" class="headerlink" title="19、爱因斯坦"></a>19、爱因斯坦</h3><p>拿到图片看到是黑白，首先想到的是LSB隐写，但是用Stegsolve查看后没有发现。</p><p>于是查看图片信息，在备注栏发现“this_is_not_password”字符串</p><p>用foremost提取，发现一个加密压缩包，尝试用刚才的字符串解密，得到flag</p><h3 id="20、easycap"><a href="#20、easycap" class="headerlink" title="20、easycap"></a>20、easycap</h3><p>打开流量包发现全为TCP协议，追踪TCP流即可发现flag。</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201132101297.png" alt="追踪TCP流" style="zoom: 50%;" />]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理</title>
      <link href="/2022/01/09/%E4%BB%A3%E7%90%86/"/>
      <url>/2022/01/09/%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="代理："><a href="#代理：" class="headerlink" title="代理："></a>代理：</h4><p><font color='red'>正向代理隐藏用户</font>，比如说翻墙<br><font color='red'>反向代理隐藏服务器</font>，比如说做负载均衡</p><h5 id="1、正向代理-Forward-Proxy-："><a href="#1、正向代理-Forward-Proxy-：" class="headerlink" title="1、正向代理(Forward Proxy)："></a>1、正向代理(Forward Proxy)：</h5><p>一般情况下，如果没有特别说明，代理技术默认说的是正向代理技术。</p><p>代理服务器替代访问方【用户A】去访问目标服务器【服务器B】正向代理(forward)是一个位于客户端【用户A】和原始服务器(origin server)【服务器B】之间的服务器【代理服务器Z】</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092233362.jpeg"></p><h6 id="作用："><a href="#作用：" class="headerlink" title="作用："></a><strong>作用：</strong></h6><p>1、访问本无法访问的服务器B</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092234894.jpeg" alt="img"></p><p>假设图中路由器从左到右命名为R1,R2假设最初用户A要访问服务器B需要经过R1和R2路由器这样一个路由节点，如果路由器R1或者路由器R2发生故障，那么就无法访问服务器B了。但是如果用户A让代理服务器Z去代替自己访问服务器B，由于代理服务器Z没有在路由器R1或R2节点中，而是通过其它的路由节点访问服务器B，那么用户A就可以得到服务器B的数据了。现实中的例子就是“FQ”。不过自从VPN技术被广泛应用外，“FQ”不但使用了传统的正向代理技术，有的还使用了VPN技术。</p><p>2、加速访问服务器B</p><p>假设用户A到服务器B，经过R1路由器和R2路由器，而R1到R2路由器的链路是一个低带宽链路。而用户A到代理服务器Z，从代理服务器Z到服务器B都是高带宽链路。那么很显然就可以加速访问服务器B了。</p><p>3、Cache作用</p><p>Cache（缓存）技术和代理服务技术是紧密联系的（不光是正向代理，反向代理也使用了Cache（缓存）技术。如上图，如果在用户A访问服务器B某数据G之前，已经有人通过代理服务器Z访问过服务器B上得数据G，那么代理服务器Z会把数据G保存一段时间，如果有人正好取该数据G，那么代理服务器Z不再访问服务器B，而把缓存的数据G直接发给用户A。这一技术在Cache中术语就叫Cache命中。如果有更多的像用户A的用户来访问代理服务器Z，那么这些用户都可以直接从代理服务器Z中取得数据G，而不用千里迢迢的去服务器B下载数据了。</p><p>4、客户端访问授权</p><p>一些公司采用ISA SERVER做为正向代理服务器来授权用户是否有权限访问互联网</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092234587.jpeg"></p><p>防火墙作为网关，用来过滤外网对其的访问。假设用户A和用户B都设置了代理服务器，用户A允许访问互联网，而用户B不允许访问互联网（这个在代理服务器Z上做限制）这样用户A因为授权，可以通过代理服务器访问到服务器B，而用户B因为没有被代理服务器Z授权，所以访问服务器B时，数据包会被直接丢弃。</p><p>5、隐藏访问者的行踪</p><p>服务器B并不知道访问自己的实际是用户A，因为代理服务器Z代替用户A去直接与服务器B进行交互。如果代理服务器Z被用户A完全控制（或不完全控制），会惯以“肉鸡”术语称呼。</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092234814.jpeg"></p><p>正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，<font color='red'>客户端向代理发送一个请求并指定目标(原始服务器)</font>，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。</p><h5 id="2、反向代理（reverse-proxy）："><a href="#2、反向代理（reverse-proxy）：" class="headerlink" title="2、反向代理（reverse proxy）："></a>2、反向代理（reverse proxy）：</h5><p>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端。</p><p><font color='red'>即用户始终访问的是代理服务器，而不知道原始资源服务器</font></p><h6 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h6><p>1、 保护和隐藏原始资源服务器</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092234984.jpeg" alt="img"></p><p>A以为自己访问的B，其实一直在访问Z，实质上A指定的是Z的位置。Z从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。</p><p>2、 负载均衡</p><p>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</p><p>当然反向代理服务器像正向代理服务器一样拥有CACHE的作用，它可以缓存原始资源服务器B的资源，而不是每次都要向原始资源服务器B请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户X来自同一个网络，那么用户N访问反向代理服务器X，就会得到很高质量的速度。这正是CDN技术的核心。</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092235723.jpeg"></p><h5 id="3-透明代理"><a href="#3-透明代理" class="headerlink" title="3.透明代理"></a>3.透明代理</h5><p><font color='red'>客户端根本不需要知道有代理服务器的存在，它改编你的报文并会传送真实IP。</font></p><p>被代理的设备上不需要运行任何代理软件(比如 Xray、V2RayNG 等)，当你连接上网络时，你的设备已经被代理了。这也意味着，代理的软件运行在别的地方，比如运行在路由器中，通过路由器上网的设备就自动被代理了。</p><p>注意，加密的透明代理则是属于匿名代理，意思是不用设置使用代理了。透明代理实践的例子就是时下很多公司使用的行为管理软件。</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092235412.jpeg"></p><p>用户A和用户B并不知道行为管理设备充当透明代理行为，当用户A或用户B向服务器A或服务器B提交请求的时候，透明代理设备根据自身策略拦截并修改用户A或B的报文，并作为实际的请求方，向服务器A或B发送请求，当接收信息回传，透明代理再根据自身的设置把允许的报文发回至用户A或B，如上图，如果透明代理设置不允许访问服务器B，那么用户A或者用户B就不会得到服务器B的数据。</p>]]></content>
      
      
      <categories>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透：数据包扩展</title>
      <link href="/2022/01/09/%E6%B8%97%E9%80%8F%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%8C%85%E6%89%A9%E5%B1%95/"/>
      <url>/2022/01/09/%E6%B8%97%E9%80%8F%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%8C%85%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-S数据包"><a href="#HTTP-S数据包" class="headerlink" title="HTTP/S数据包"></a>HTTP/S数据包</h2><p>Request：请求数据包</p><p>Response：返回数据包</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092229950.png" style="zoom:50%;" /><p>有代理：实现两次修改</p><p>Proxy：代理服务器</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092229796.png" style="zoom:50%;" /><p>http：三层，明文   HTTP   TCP   IP</p><p>https：四层，加密  HTTP  SSL/TLS  TCP  IP（安全性高）</p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092229254.png" style="zoom: 50%;" /><h4 id="HTTP-简要通信过程"><a href="#HTTP-简要通信过程" class="headerlink" title="HTTP 简要通信过程"></a>HTTP 简要通信过程</h4><p>建立连接——&gt;发送请求数据包——&gt;返回响应数据包——&gt;关闭连接 </p><p>1.浏览器建立与 web 服务器之间的连接</p><p>2.浏览器将请求数据打包（生成请求数据包）并发送到 web 服务器 </p><p>3.web 服务器将处理结果打包（生成响应数据包）并发送给浏览器 </p><p>4.web 服务器关闭连接</p><h2 id="Request请求数据包数据格式"><a href="#Request请求数据包数据格式" class="headerlink" title="Request请求数据包数据格式"></a>Request请求数据包数据格式</h2><p>1.请求行：请求类型/请求资源路径、协议的版本和类型 </p><p>2.请求头：一些键值对，浏览器与 web 服务器之间都可以发送，特定的某种含义</p><p>3.空行：请求头与请求体之间用一个空行隔开</p><p>4.请求体：要发送的数据(一般 post 提交会使用)</p><p>例：user=123&amp;pass=123</p><p>eg:</p><p><strong>Request Headers</strong></p><p>POST /adduser HTTP/1.1<br>Host: localhost:8030<br>Connection: keep-alive<br>Content-Length: 16<br>Pragma: no-cache<br>Cache-Control: no-cache<br>Origin: chrome-extension://fdmmgilgnpjigdojojpjoooidkmcomcm<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)<br>Chrome/66.0.3359.181 Safari/537.36   //不同平台不一样<br>Content-Type: application/x-www-form-urlencoded<br>Accept: <em>/</em><br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9</p><p><strong>Form Data</strong></p><p>name=name&amp;age=11</p><p>#请求行<br>请求行由三个标记组成：请求方法、请求 URL 和 HTTP 版本，它们用空格分享。<br>例如：GET /index.html HTTP/1.1<br>HTTP 规划定义了 8 种可能的请求方法：<br>GET：检索 URL 中标识资源的一个简单请求<br>HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档<br>POST：服务器接受被写入客户端输出流中的数据的请求<br>PUT：服务器保存请求数据作为指定 URL 新内容的请求<br>DELETE：服务器删除 URL 中命令的资源的请求<br>OPTIONS：关于服务器支持的请求方法信息的请求<br>TRACE：web 服务器反馈 Http 请求和其头标的请求<br>CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理</p><p>#请求头<br>由关键字/值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。<br>1）HOST: 主机或域名地址<br>2）Accept：指浏览器或其他客户可以接受的 MIME 文件格式。Servlet 可以根据它判断并返回适当的文件格式。<br>3）User-Agent：是客户浏览器名<br>4）Host：对应网址 URL 中的 Web 名称和端口号。<br>5）Accept-Langeuage：指出浏览器可以接受的语言种类，如 en 或 en-us，指英语。<br>6）connection：用来告诉服务器是否可以维持固定的 HTTP 连接。http 是无连接的，HTTP/1.1 使用 Keep-Alive为默认值，这样，当浏览器需要多个文件时(比如一个 HTML 文件和相关的图形文件)，不需要每次都建立连接<br>7）Cookie：浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。<br>8）Referer(来源):表明产生请求的网页URL。如/icconcept/index.jsp中点击一个链接到网页/icwork/search ，在向服务器发送的GET/icwork/search中的请求中，Referer是<a href="http://hostname:8080/icconcept/index.jsp%E3%80%82%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E8%B7%9F%E8%B8%AAWeb%E8%AF%B7%E6%B1%82%E6%98%AF%E4%BB%8E%E4%BB%80%E4%B9%88%E7%BD%91%E7%AB%99%E6%9D%A5%E7%9A%84%E3%80%82">http://hostname:8080/icconcept/index.jsp。这个属性可以用来跟踪Web请求是从什么网站来的。</a><br>9）Content-Type：用来表名 request 的内容类型。可以用 HttpServletRequest 的 getContentType()方法取得。<br>10）Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是 ISO-8859-1.<br>11）Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到 Web 响应之后先解码，然后再检查文件格式。</p><p>#空行<br>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</p><p>#请求数据<br>使用 POST 传送，最常使用的是 Content-Type 和 Content-Length 头标。</p><h2 id="Request返回数据包数据格式"><a href="#Request返回数据包数据格式" class="headerlink" title="Request返回数据包数据格式"></a>Request返回数据包数据格式</h2><p>一个响应由四个部分组成；状态行、响应头标、空行、响应数据。 </p><p>1.状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔 </p><p>2.响应头标：包含服务器类型、日期、长度、内容类型等 </p><p>3.空行：响应头与响应体之间用空行隔开 </p><p>4.响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面</p><h4 id="HTTP-响应码（status）："><a href="#HTTP-响应码（status）：" class="headerlink" title="HTTP 响应码（status）："></a>HTTP 响应码（status）：</h4><p>1xx：信息，请求收到，继续处理<br>2xx：成功，行为被成功地接受、理解和采纳<br>3xx：重定向，为了完成请求，必须进一步执行的动作<br>4xx：客户端错误<br>5xx：服务器错误</p><p>200：存在文件<br>403：存在文件夹<br>3xx：均可能存在<br>404：都不存在<br>500：均可能存在</p><p><img src="https://gitee.com/mie1732/emc/raw/master/img/202201092230998.png" alt="image-20211002190124418"></p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p>​         1、可通过修改数据包来修改网页信息</p><p>​         2、浏览器与模拟器访问的抓包区别，按照APP的格式在浏览器访问</p><h4 id="来源页伪造："><a href="#来源页伪造：" class="headerlink" title="来源页伪造："></a>来源页伪造：</h4><p>​        1、referer：用来跟踪Web请求是从什么网站来的。</p><p>​        （若没有则表示直接访问）</p><p>​        2、User-Agent：访问途径信息，电脑浏览器/手机访问信息</p><p>​         （NetType：微信网络类型字段）</p><h4 id="PHP的ip获取方式：（可用于伪造ip等）"><a href="#PHP的ip获取方式：（可用于伪造ip等）" class="headerlink" title="PHP的ip获取方式：（可用于伪造ip等）"></a>PHP的ip获取方式：（可用于伪造ip等）</h4><p>1、X_FORWARDED_FOR：HTTP 扩展头部，主要是为了让 Web 服务器获取访问用户的真实 IP 地址（未必真实）</p><p>2、REMOTE_ADDR：一般用于抓取访客ip，但不能抓取有proxy访客的真实ip。和 Web 服务器握手的 IP 是什么（这个不能伪造）。很多用户都通过代理来访问服务器的，那么假如使用该全局变量，PHP获取到的 IP 就是代理服务器的 IP（不是用户的）。</p><p>3、CLIENT_IP：</p><p>一个请求可能经过的路径：</p><p>客户端=&gt;（正向代理=&gt;透明代理=&gt;服务器反向代理=&gt;）Web服务器</p>]]></content>
      
      
      <categories>
          
          <category> 小迪渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片格式区别</title>
      <link href="/2021/11/11/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/11/11/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="1、BMP"><a href="#1、BMP" class="headerlink" title="1、BMP"></a>1、BMP</h3><p>Bitmap（位图）</p><p>windows操作系统中的标准图像文件格式，应用广泛图像信息丰富，几乎不进行压缩。</p><p>缺点：占用磁盘空间过大（在单机比较流行）</p><h3 id="2、JPEG-amp-JPG"><a href="#2、JPEG-amp-JPG" class="headerlink" title="2、JPEG&amp; JPG"></a>2、JPEG&amp; JPG</h3><p>Joint Photographic Experts Group</p><p>JPEG是文件格式，JPG是扩展名。JPEG的文件格式一般有两种文件扩展名：.jpg和.jpeg。</p><p>一种有损压缩格式，能够将图像压缩在很小的储存空间，图像中重复或不重要的资料会被丢失，体积小，兼容性好</p><p>缺点：某些操作系统不支持四位文件后缀，因此常用jpg；容易造成图像数据损伤</p><h3 id="3、PNG"><a href="#3、PNG" class="headerlink" title="3、PNG"></a>3、PNG</h3><p>Portable Network Graphics（便携式网络图形）</p><p>支持无损压缩的位图图形格式，支持<u>索引</u>、<u>灰度</u>、RGB三种颜色方案以及<u>Alpha通道</u>等特性。能将文件压缩（非失真压缩）到极限利于传输但保留所有图像品质。显示速度快（在浏览器上采用流式浏览，即使经过交错处理的图像会在完全下载之前提供浏览者一个基本的图像内容，然后再逐渐清晰起来。它允许连续读出和写入图像数据）。支持透明效果。</p><h3 id="4、TIFF"><a href="#4、TIFF" class="headerlink" title="4、TIFF"></a>4、TIFF</h3><p>Tag Image File Format（标签图像文件格式）</p><p>拓展名：.tif</p><p>主要用来存储包括照片和艺术图在内的图像，支持多色彩系统，独立于操作系统。印刷业使用广泛。</p><p>缺点：因采用多种压缩方法，程序设计复杂度高</p><h3 id="5、GIF"><a href="#5、GIF" class="headerlink" title="5、GIF"></a>5、GIF</h3><p>Graphics Interchange Format（图形交换格式）</p><p>用于以超文本标志语言方式显示索引彩色图像，在因特网和其他在线服务系统上得到广泛应用。</p><p>压缩比高，占用内存少</p><h3 id="6、PCX"><a href="#6、PCX" class="headerlink" title="6、PCX"></a>6、PCX</h3><p>PC Paintbrush Exchange</p><p>pcx压缩为无损压缩。</p><p>最广泛接受的DOS图像标准之一，然而这种使用格式已经被其他更复杂的图像格式如GIF、JPEG、PNG渐渐取代。</p><p>缺点：不受web浏览器支持</p><h3 id="7、TGA"><a href="#7、TGA" class="headerlink" title="7、TGA"></a>7、TGA</h3><p>（计算机图像文件格式）</p><p>结构简单，属于一种图形、图像数据的通用格式，是计算机生成图像向电视转换的一种首选格式。</p><p>最大特点是可以做出不规则形状的图形、图像文件。</p><p>采用的不失真的压缩方式</p><h3 id="8、FPX"><a href="#8、FPX" class="headerlink" title="8、FPX"></a>8、FPX</h3><p>影像被存储成一系列高低不同的分辨率，因此当影像被放大时仍可维持维持影像的质素。</p><p>修饰FPX影像时，只会处理被修饰的部分，减少处理器以及记忆体的负担，减少影像处理时间。</p><h3 id="9、SVG"><a href="#9、SVG" class="headerlink" title="9、SVG"></a>9、SVG</h3><p>Scalable Vector Graphics（矢量图形）</p><p>开放标准的矢量图形语言（基于XML），可任意放大图形显示，边缘异常清晰，其中的文字可保留可编辑可搜寻的状态，无文字体的限制，生成文件小，下载快，适用于设计高分辨率的web图形网页（用户可直接用代码描绘图像）</p><h3 id="10、PSD"><a href="#10、PSD" class="headerlink" title="10、PSD"></a>10、PSD</h3><p>Photoshop Document</p><p>非压缩的原始文件保存格式。</p><p>photoshop图像处理软件的专用文件格式，扫描仪不能直接生成该格式文件。</p><p>PSD文件有时容量会很大，但由于可以保留所有原始信息，在图像处理中对于尚未制作完成的图像，一般选用PSD格式</p><h3 id="11、CDR"><a href="#11、CDR" class="headerlink" title="11、CDR"></a>11、CDR</h3><p>著名绘图软件CoreIDRAW的专用图形文件格式。</p><p>CDR可以记录文件的属性、位置和分页等。但兼容度较差，只能在CoreIDraw中打开</p><h3 id="12、PCD"><a href="#12、PCD" class="headerlink" title="12、PCD"></a>12、PCD</h3><p>Kodak PhotoCD（照片激光唱片），文件扩展名：.pod</p><p>Kodak开发的一种Photo CD文件格式，其他软件系统只能对其进行读取。该格式使用YCC色彩模式定义图像中的色彩。</p><p>YCC和CIE色彩空间包含比显示器和打印设备的RGB色和 CMYK色多得多的色彩。PhotoCD图像大多具有非常高的质量。</p><h3 id="13、EXIF"><a href="#13、EXIF" class="headerlink" title="13、EXIF"></a>13、EXIF</h3><p>与JPEG格式相同，区别：除保存图像数据外，还能存储摄影日期，使用光圈，快门，闪光灯数据等曝光资料和附带信息以及小尺寸图像</p><h3 id="14、DXF"><a href="#14、DXF" class="headerlink" title="14、DXF"></a>14、DXF</h3><p>Drawing Exchange Format</p><p>为AutoCAD的图形文件格式，它以ASCLL方式存储图形，咋表现图形大小方面十分精确，可被CoreIDraw和3DS等大型软件编辑</p><h3 id="15、UFO"><a href="#15、UFO" class="headerlink" title="15、UFO"></a>15、UFO</h3><p>为UIead Photolm apct的专用图像格式，能完整记录所有Photolmapct处理过的图像属性。</p><p>UFO文件以对象来代替图层记录图像信息。</p><h3 id="16、EPS"><a href="#16、EPS" class="headerlink" title="16、EPS"></a>16、EPS</h3><p>Encapsulated Post Script</p><p>EPS文件是桌面印刷系统普遍使用的通用交换格式当中的一种综合格式。EPS文件格式又被称为带有预视图象的PS格式，它是由一个PostScript语言的文本文件和一个（可选）低分辨率的由PICT或TIFF格式描述的代表像组成。</p><p>主要用于排版打印等输出工作</p><h3 id="17、AI"><a href="#17、AI" class="headerlink" title="17、AI"></a>17、AI</h3><p>一种分层文件，每个对象都是独立的，以这种格式保存的文件便于修改。</p><p>这种格式文件可以在任何尺寸大小下按最高分辨率输出，兼容性较高</p><h3 id="18、RAW"><a href="#18、RAW" class="headerlink" title="18、RAW"></a>18、RAW</h3><p>RAW Image Format</p><p>一种记录了数码相机传感器的原始信息，同时记录了由相机拍摄所产生的一些元数据（Metadata，如ISO的设置、快门速度、光圈值、白平衡等）的文件。RAW是未经处理、也未经压缩的格式，可以把RAW概念化为“原始图像编码数据”或更形象的称为“数字底片”</p><p>即相机保留的一组数据。此数据即为拍摄数据，可以随意调整</p>]]></content>
      
      
      <categories>
          
          <category> 图片格式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片隐写</title>
      <link href="/2021/11/05/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
      <url>/2021/11/05/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="1、头文件缺失"><a href="#1、头文件缺失" class="headerlink" title="1、头文件缺失"></a>1、头文件缺失</h3><p><img src="https://img-blog.csdnimg.cn/20200714132519595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FURldVUw==,size_16,color_FFFFFF,t_70" alt="img"></p><p>zip文件头：50 4B 03 04</p><p>PNG文件头：89 50 4E 47 0D 0A 1A 0A 00 00 00 0D</p><p>对于文件头缺失的文件，一般都是粘贴，如果选择写入会覆盖原来的</p><p>图片高度有问题修改第二排前16位，前面是宽后面是高</p><h3 id="2、LBS隐写：最低有效位-StegSolve"><a href="#2、LBS隐写：最低有效位-StegSolve" class="headerlink" title="2、LBS隐写：最低有效位  StegSolve"></a>2、LBS隐写：最低有效位  StegSolve</h3><p>用嵌入的秘密信息取代载体图像的最低比特位，原来的7个高低平面与替代 秘密信息的最低位平面组合成含隐藏信息对等的新图形。</p><p>png图片：一种无损压缩的位图片形格式，也只有在无损压缩或者无压缩的      图片（BMP）上实现lsb隐写。</p><p>如果图像是jpg图片的话，就没法使用lsb隐写了，原因是jpg图片对像数进行了有损压缩，我们修改的信息就可能会在压缩的过程中被破坏。</p><p>而png图片虽然也有压缩，但却是无损压缩，这样我们修改的信息也就能得到正确的表达，不至于丢失。BMP的图片也是一样的，是没有经过压缩的。BMP图片一般是特别的大的，因为BMP把所有的像数都按原样储存，没有进行压缩。</p><p>LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位（LSB）每个像数可以携带3比特的信息。</p><p><img src="https://image-static.segmentfault.com/108/897/1088978167-5b88d68b97c13_articlex"></p><p>修改最低有效位的信息的算法就叫做lsb加密算法，提取最低有效位信息的算法叫做lsb解密算法。</p><p>由于图像是由像素构成的，每个像素有8位(对于BMP图像来说),通常最后一位的变化，通过肉眼是无法察觉的</p><p>MSB是最高有效位，Bit Plane Order代表颜色的排序方式</p><p>字节上的读取顺序与<code>Bit Order</code>选项有关，如果设置了MSBFirst，是从高位开始读取，LSBFirst是从低位开始读取</p><p>先左右滑动查看，发现red、blue、green均为0 </p><p><img src="https://img-blog.csdnimg.cn/20201128155355874.png"></p><p>然后选择Data Extract，抽取数据</p><p><em>File Format：文件格式，这个主要是查看图片的具体信息</em></p><p><em>Data Extract：数据抽取，图片中隐藏数据的抽取</em></p><p><em>Frame Browser：帧浏览器，主要是对GIF之类的动图进行分解，动图变成一张张                                      图片，便于查看</em></p><p><em>Image Combiner：拼图，图片拼接</em></p><h3 id="3、zsteg："><a href="#3、zsteg：" class="headerlink" title="3、zsteg："></a>3、zsteg：</h3><p>（1）查看LSB：</p><pre><code>zsteg xxx.bmp zsteg xxx.png zsteg -a (文件名)    #查看各个通道的lsb</code></pre><p>（2）检测zlib：</p><pre><code>#-b的位数是从1开始的 zsteg zlib.bmp -b 1 -o xy -v</code></pre><p>（3）提取该通道图片：</p><pre><code>zsteg -e b8,a,lsb,xy 文件.png -&gt; out.png</code></pre><p>先放winhex里，没有找到flag，kali打开，没有修改宽高，binwalk分析，没有隐藏文件，尝试用zsteg工具，发现一串base密码，解密即可</p><h3 id="4、动图"><a href="#4、动图" class="headerlink" title="4、动图"></a>4、动图</h3><p>看到动图先一帧一帧的看但是没有看到任何信息</p><p>尝试用StegSolve查看，向左查看发现red plane 7的时候变化较大，用Frame Browser（帧浏览器）查看，发现只有上半的时候可能藏有flag，再保存下来，查看到red plane 2 的时候即可发现flag。（这道题没怎么明白原理）</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> 图片隐写 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
